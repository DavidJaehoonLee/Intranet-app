<script type="text/javascript">

    var pricerUtils = new function () {

        this.toUndefinedIfEmpty = (value) => value == undefined || value == "undefined" || value.toString().trim() == "" ? undefined : value;

        this.getFilteredPrograms = async (filters) => {
            const url = '@Url.Action("FilterPrograms", "Home")';
            return await jsonFetchAsPOST(url, filters);
        };

    }

    var pricerUIUtils = new function () {

        this.createLabelWithCheckBoxControl = (labelText, inputName, inputId, inputValue, inputClickListener = (htmlInputElement, mouseEvent)) => {
            const label = document.createElement("label");
            label.htmlFor = inputId;
            label.style.fontWeight = "normal";
            label.style.userSelect = "none";
            const input = document.createElement("input");
            input.type = "checkbox";
            input.name = inputName;
            input.id = inputName;
            input.value = inputValue;
            input.addEventListener('click', (el, me) => {
                inputClickListener(el, me);
            });
            label.append(input);
            label.append(labelText);

            return label;
        }

        this.createLabelWithRadioControl = (labelText, inputName, inputId, inputValue, inputClickListener = (htmlInputElement, event)) => {
            const label = document.createElement("label");
            label.htmlFor = inputId;
            label.style.fontWeight = "normal";
            label.style.userSelect = "none";
            const input = document.createElement("input");
            input.type = "radio";
            input.name = inputName;
            input.id = inputId;
            input.value = inputValue;
            input.style.opacity = 1;
            input.addEventListener("change", (el, me) => {
                inputClickListener(el, me);
            });
            label.append(input);
            label.append(labelText);

            return label;
        }

    }


</script>