@{
    ViewData["Title"] = "ape";
    string marketPlace = "marketPlace";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's ape.</p>


@section scripts {
    @Html.Partial("_APE_FunctionsPartialScript")

    <script type="text/javascript">
        var dropDownOptions = {
            amWestDocumentationCodeNames: [],
            amortizationCodeNames: [],
            lienPositionCodeNames: [],
            loanPurposeCodenames: [],
            loanTermCodeNames: [],
            mortgageTypeCodeName: [],
            occupancyCodeName: [],
            propertyTypeCodeNames: [],
            refinancePurposeCodeNames: [],
            unitCodeNames: [],
            residencyCodeNames: []
        };

        var isFirstLoad = true;
        const allPrograms = Array.of();
        var programs = Array.of();
        var paginator;
        var compensation;
        const initialBrokerOrgId = "@Model.BrokerOrgID";
        const marketPlace = "@marketPlace";

        var scenariosHistory = [];
        var progamCodesSelected = [];
        var additionalOptionFields = [];

        function closeFilters() {
            document.getElementById("filters").parentElement.style.display = "none";
        }

        function openFilter() {
            document.getElementById("filters").parentElement.style.display = "";
            // Scroll up
            setTimeout(() => {
                $(".filters-container").animate({
                        scrollTop: 0
                }, 300);
            }, 100);
        }

        function openSaveDialog() {
            $('#textScenarioName').val('');
            $('#saveErrors').text('');
            $('#modalSave').modal('show');
        }

        const getAllSavedScenarios = () => {
            $.ajax({
                url: "@Url.Action("GetAllSavedScenariosByUser")",
                method: "GET",
                success: function (result) {
                    scenariosHistory = result.map(item => {
                        return {
                            id: item.Id,
                            description: item.Description,
                            jsonData: JSON.parse(item.JsonData),
                            date: item.CreatedAt
                        }
                    });
                },
                complete: function () {
                    fillHistoryTable();
                }
            });
        }

        const fillHistoryTable = () => {
            table = document.querySelector('#HistoryTable > tbody');
            table.innerHTML = "";
            let rows = "";
            for (const item of scenariosHistory) {
                rows += `<tr data-id="${item.id}" @(!true ? "ondblclick" : "onclick")="getData(${item.id})><td>${item.description}</td><td><i class="fa fa-trash fa-lg" aria-hidden="true" onclick="removeScenario(event)"></i></td></tr>`;
            }
            table.innerHTML = rows;
        }

        const getData = id => {
            const data = scenariosHistory.find(x => x.id === id);
            if (data) {
                $("#modalHistory").modal("hide");
                setScenario(data.jsonData);
            }
        }

        function ConfirmDialog(msg, callback) {
            var $confirm = $("#ModalConfirm");
            $confirm.modal('show');
            $("#ModalConfirmText").html(msg);
            $("#ModalConfirmYes").off('click').click(function () {
                $confirm.modal("hide");
                callback();
            });
        }

        function removeScenario(event) {
            event.stopPropagation();
            const id = event.target.parentNode.parentNode.dataset.id;
            const data = {
                id,
            };
            addAtiForgeryToken(data, "#newPricerContainer");

            ConfirmDialog("Are you sure to delete?", () => {
                $.ajax({
                    url: "@Url.Action("DeleteSavedScenarioById")",
                    method: "POST",
                    data: data,
                    success: function (result) {
                        if (result.success) {
                            document.querySelector(`#HistoryTable > tbody > tr[data-id="${id}"]`).remove();
                            //Remove the item from the array
                            scenariosHistory = scenariosHistory.filter(item => item.id != id);
                        }
                    },
                    error: function () {
                        showToastMessage("An unexpected error has occured. Please try again", "error", 5000);
                    }
                });
            });
        }

        function existsName(name) {
            const index = scenariosHistory.findIndex(item => item.description === name);
            return index > -1;
        }

        var isProductSelection = false;

        document.addEventListener('DOMContentLoaded', function () {

            getAllSavedScenarios();

            //---------------- Init DOMContentLoaded-------------------------
            initialize();
            //------------- Starts Controls events---------------

            DropDownCascading_ddc_Product.OnChange(async () => {
                isProductSelection = true;
                selectProgramSettings();
                resetProgramsSelected();
                resetAdditionalOptionFields();
                const values = DropDownCascading_ddc_Product.GetValue();
                const value = Array.from(values).find(v => v && v.length > 0);
                if (value && programCodesSelected.length == 0) {
                    programCodesSelected.push(value);
                    const additionalFields = await pricerUtils.getAdditionalOptionFields(value);
                    Array.from(additionalFields).forEach(a => additionalOptionFields.push(a));
                    filterPrograms();
                    selectProgramSettings(value);

                    const mortgageTypes = allPrograms.filter(p => p.LoanProgramCode == value).map(p => p.MortgageType.toString());

                    document.getElementById("rdbHELOCPositionFirst").checked = false;
                    document.getElementById("rdbHELOCPositionSecond").checked = false;

                    if (mortgageTypes.includes("6")) {
                        document.getElementById("helocPositionDiv").style.display = "";
                        document.getElementById("");
                    } else {
                        document.getElementById("helocPositionDiv").style.display = "none";
                    }

                    @if(true)
                    {
                        <text>
                    openFilter();
                        </text>
                    }
                } else {
                    isProductSelection = false;
                    selectProgramSettings();
                    filterPrograms();
                }

                const amWestDocumentations = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode)).map(p => p.AmWestDocumentation.toString()).flat();
                onChangeAmWestDocumentationType(amWestDocumentations);

                const mortgageTypeCodes = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode)).map(p => p.MortgageType.toString());
                onChangeLoanType(mortgageTypeCodes);

            });
        }, false);

        CustomDropDown_cdd_PropertyType.OnChange(() => {
            const value = CustomDropDown_cdd_PropertyType.Value();
            onChangePropertyType(value);
            filterPrograms;
        });

        CustomDropDown_cdd_NumberUnits.OnChange(() => filterPrograms());

        CustomDropDown_cdd_ResidencyType.OnChange(() => {
            const value = CustomDropDown_cdd_ResidenceType.Value();
            onChangeResidencyType(value);
            filterPrograms();
        });

        CustomInput_ci_NewPricing_FICO.OnBlur(() => filterPrograms());

        CustomInput_ci_NewPricing_AppraisalValue.OnBlur(() => {
            const value = CustomInput_ci_NewPricing_AppraisalValue.Value();
            const valuePurchasePrice = pricerUtils.toUndefinedIfEmpty(CustomInput_ci_NewPricing_PurchasePrice.Value());
            if (!valuePurchasePrice)
                CustomInput_ci_NewPricing_PurchasePrice.Value(value);

            triggerChangesForLTVsInputs();
            filterPrograms();
            checkMortgageInsurance();

            if (value != "" && !isNaN(value) && parseFloat(value) > 0) {
                CustomInput_ci_NewPricing_LTV.Enable();
            } else {
                CustomInput_ci_NewPricing_LTV.Disabled();
            }
        });

        CustomInput_ci_NewPricing_PurchasePrice.OnBlur(() => {
            triggerChangesForLTVsInputs();
            filterPrograms();
            checkMortgageInsurance();
        });

        CustomInput_ci_NewPricing_BaseLoanAmount.OnBlur(() => {
            triggerChangesForLTVsInputs();
            filterPrograms();

            if (marketPlace !== "PRIVATELENDING") {
                loanCompensationInfo(compensation);
            }
            checkMortgageInsurance();
        });

        CustomInput_ci_NewPricing_FirstLienAmount.OnBlur(() => {
            triggerChangesForLTVsInputs();
            filterPrograms();
        });

        CustomInput_ci_NewPricing_SubordinateLienAmount.OnBlur(() => {
            triggerChangesForLTVsInputs();
            filterPrograms();
        });

        // Loan program setting
        selectProgramSettings = async (loanProgramCode = undefined) => {
            var programSettings = {};
            if (loanProgramCode) {
                programSettings = await pricerUtils.getProgramSettings(loanProgramCode);
            }
            else {
                const loanPurposeControls = document.querySelectorAll("div#loanPurposeControls input[type='radio']");
                const refinancePurposeControls = document.querySelectorAll("div#refinancePurposeControls input[type='radio']");
                const occupancyControls = document.querySelectorAll("div#occupancyControls input[type='radio']");

                loanPurposeControls.forEach(c => {
                    c.checked = false;
                    c.removeAttribute("disabled");
                });

                refinancePurposeControls.forEach(c => {
                    c.checked = false;
                    c.removeAttribute("disabled");
                });

                occupancyControls.forEach(c => c.checked = false);
            }

            const loanTypesControls = document.querySelectorAll(`div#loanTypeControls input[type="checkbox]`);
            if (loanTypesControls.length > 0) {
                loanTypesControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.MortgageType.toString()) {
                        control.checked = true;
                        if (control.value == "6") {
                            document.getElementById("rdbLoanPurpose2").checked = true;
                            document.getElementById("rdbRefinancePurposeCashOut").checked = true;

                            document.getElementById("rdbLoanPurpose1").setAttribute("disabled", true);
                            document.getElementById("rdbRefinancePurposeNoCashOut").setAttribute("disabled", true);
                        }
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const amortizationControls = document.querySelectorAll(`div#amortizationControls input[type="checkbox"]`);
            if (amortizationControls.length > 0) {
                amortizationControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.Amortization.toString()) {
                        control.checked = true;
                        if (control.value == "6") {//6 = HELOC
                            document.getElementById("rdbLoanPurpose2").checked = true;
                            document.getElementById("rdbRefinancePurposeCashOut").checked = true;

                            document.getElementById("rdbLoanPurpose1").setAttribute("disabled", true);
                            document.getElementById("rdbRefinancePurposeNoCashOut").setAttribute("disabled", true);
                        }
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const loanTermControls = document.querySelectorAll(`div#loanTermControls input[type="checkbox"]`);
            if (loanTermControls.length > 0) {
                loanTermControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.Term.toString()) {
                        control.checked = true;
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const amwesDocumentationTypeControls = document.querySelectorAll(`div#amWestDocumentationTypeControls input[type="checkbox"]`);
            if (amwesDocumentationTypeControls.length > 0) {
                amwesDocumentationTypeControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.AmWestDocumentation.toString()) {
                        control.checked = true;
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }
        }

        resetProgramsSelected = () => {
            programCodesSelected = [];
            document.querySelector("#programCodesSelectedContainer > ul").innerHTML = "";
            document.getElementById("programCodesSelectedContainer").style.display = "none";
        }

        resetAdditionalOptionFields = () => {
            additionalOptionFields = [];
        }

        filterPrograms = async () => {
            const loanProgramCode = programCodesSelected[0];
            var mortgageTypeCodes = Array.from(document.querySelectorAll("div#loanTypeControls input:checked")).map(el => el.value);
            const amortizationCodes = Array.from(document.querySelectorAll("div#amortizationControls input:checked")).map(el => el.value);
            const loanTerms = Array.from(document.querySelectorAll("div#loanTermControls input:checked")).map(el => el.value);
            const amWestDocumentation = Array.from(document.querySelectorAll("div#amWestDocumentationTypeControls input:checked")).map(el => el.value);
            const loanPurposeCodes = Array.from(document.querySelectorAll("div#loanPurposeControls input:checked")).map(el => el.value);

            if (loanPurposeCodes.includes("2")) {
                loanPurposeCodes.push("10");
            }

            const refinancePurposes = document.querySelector("div#refinancePurposeControls input:checked")?.value ?? "";
            const occupancyCode = document.querySelector("div#occupanctyControls input:check")?.value;
            const propertyTypeCode = pricerUtils.toUndefinedIfEmpty(CustomDropDown_cdd_PropertyType.Value());
            const unitCode = pricerUtils.toUndefinedIfEmpty(CustomDropDown_cdd_NumberUnits.Value());
            const minFICO = pricerUtils.toUndefinedIfEmpty(CustomInput_ci_NewPricing_FICO.Value());
            const ltv = pricerUtils.toUndefinedIfEmpty(CustomInput_ci_NewPricing_LTV.Value());
            const cltv = pricerUtils.toUndefinedIfEmpty(CustomInput_ci_NewPricing_CLTV.Value());
            const residencyCode = pricerUtils.toUndefinedIfEmpty(CustomDropDown_cdd_ResidencyType.Value());
            const isLenderFeeWaiver = document.getElementById("chbLenderFeeWaiver").checked;
            const isDecliningMarket = document.getElementById("chbDecliningMarket").checked;
            const isInterestOnly = document.getElementById("chbInterestOnly").checked;
            const isITIN = document.getElementById("chbITIN").checked;
            const isBuyDown = document.getElementById("chBuydown").checked;
            const isHortTermRental = document.getElementById("chbShortTermRental").checked;

            var programCategories = [];
            if (["3", "99", "98", "97"].some(c => mortgageTypeCodes.includes(c))) {
                if (mortgageTypeCodes.includes("3")) {
                    programCategories.push("PC_CONV");
                }
                if (mortgageTypeCodes.includes("99")) {
                    programCategories.push("PC_PF");
                }
                if (mortgageTypeCodes.includes("99")) {
                    programCategories.push("PC_PF");
                }
                if (mortgageTypeCodes.includes("97")) {
                    programCategories.push("PC_NCPF");
                }
                if (!mortgageTypeCodes.includes("3")) {
                    mortgageTypeCodes.push("3");
                }

                mortgageTypeCodes = mortgageTypeCodes.filter(c => !["99", "98", "97"].icludes(c));
            }

            showOrHideCashOutField();

            const response = await pricerUtils.getFilteredPrograms({
                loanProgramCode,
                mortgageTypeCodes: mortgageTypeCodes.join(","),
                programCategories: programCategories.join(","),
                amortizationCodes: amortizationCodes.join(","),
                loanTerms: loanTerms.join(","),
                amWestDocumentation: amWestDocumentation.join(","),
                loanPurposeCodes: loanPurposeCodes.join(","),
                refinancePurposes: refinancePurposes,
                occupancyCode: occupancyCode,
                propertyTypeCode,
                unitCode,
                minFICO,
                ltv,
                cltv,
                residencyCode,
                isLenderFeeWaiver,
                isDecliningMarket,
                isInterestOnly,
                isITIN,
                isBuyDown,
                isShortTermRental,
                isProductSelection
            });

            updateUI(response);

        }

        updateUI = (response) => {
            const { maxLTV, maxCLTV, minFICO, minLoanAmount, maxLoanAmount } = reponse;
            programs = response.programs;
            setSuggestionMessages(maxLTV, maxCLTV, minFICO, minLoanAmount, maxLoanAmount);

        }

        function showOrHideCashOutField() {
            const isCashout = document.getElementById("rdbRefinancePurposeCashOut").checked;

            if (isCashout) {
                CustomInput_ci_NewPricing_CashOutAmount.Get().parentNode.style.display = "";
            } else {
                CustomInput_ci_NewPricing_CashOutAmount.Get().parentNode.style.display = "none";
                document.getElementById("NewPricing_CashOutAmount").value = "";
            }
        }

        setSuggestionMessages = (maxLTV, maxCLTV, minFICO, minLoanAmount, maxLoanAmount) => {
            const messageTypeLTV = ((parseFloat(maxLTV) < parseFloat(CustomInput_ci_NewPricing_LTV.Value())) || maxLTV == 0) && CustomInput_ci_NewPricing_LTV.Value() != "Infinity" ? "error" : "info";
            var messageLTV = `LTV<=${parseFloat(maxLTV).toFixed(2) ?? "--"}`;

            const messageTypeCLTV = ((parseFloat(maxCLTV) < parseFloat(CustomInput_ci_NewPricing_CLTV.Value())) || maxCLTV == 0) && CustomInput_ci_NewPricing_LTV.Value() != "Infinity" ? "error" : "info";
            var messageCLTV = `CLTV<=${parseFloat(maxCLTV).toFixed(2) ?? "--"}`;

            const messageTypeFICO = (parseFloat(minFICO) > parseFloat(CustomInput_ci_NewPricing_LTV.Value())) || minFICO == 0 ? "error" : "info";
            var messageFICO = `FICO >= ${parseInt(minFICO) ?? "--"}`;

            var mortgageTypeCodes = Array.from(document.querySelectorAll("div#loanTypeControls input:checked")).map(el => el.value);
            var messageTypeLoanAmount = "info";
            var messageLoanAmount = `Amount >= ${formatCurrency(minLoanAmount)}
                                     Amount <= ${formatCurrency(maxLoanAmount)}`;

            if ((mortgageTypeCodes.length > 0 && mortgageTypeCodes.every(c => ["2", "4"].includes(c))) || ([minLoanAmount, maxLoanAmount].includes(-2))) {
                messageTypeLoanAmount = "info";
                messageLoanAmount = "Please review the guielines";
            } else if (parseFloat(minLoanAmount) == -1 || parseFloat(maxLoanAmount) == -1) {
                messageTypeLoanAmount = "error";
                messageLoanAmount = CustomInput_ci_NewPricing_BaseLoanAmount.Get().querySelector(".cstm-msg")?.querySelector("p")?.textContent;
            } else if (parseFloat(minLoanAmount) > parseFloat(CustomInput_ci_NewPricing_BaseLoanAmount.Value())
                    || parseFloat(maxLoanAmount) < parseFloat(CustomInput_ci_NewPricing_BaseLoanAmount.Value())
            ) {
                messageTypeLoanAmount = "error";
            }

            if (maxLTV == 0) {
                messageLTV = CustomInput_ci_NewPricing_LTV.Get().querySelector(".cstm-msg")?.querySelector("p")?.textContent ?? "";
                messageCLTV = CustomInput_ci_NewPricing_CLTV.Get().querySelector(".cstm-msg")?.querySelector("p")?.textContent ?? "";
                messageFICO = CustomInput_ci_NewPricing_FICO.Get().querySelector(".cstm-msg")?.querySelector("p")?.textContent ?? "";
            }

            CustomInput_ci_NewPricing_LTV.Message(messageTypeLTV, `${messageLTV}`);
            CustomInput_ci_NewPricing_CLTV.Message(messageTypeCLTV, `${messageCLTV}`);
            CustomInput_ci_NewPricing_FICO.Message(messageTypeFICO, `${messageFICO}`);
            CustomInput_ci_NewPricing_BaseLoanAmount.Message(messageTypeLoanAmount, `${messageLoanAmount}`);

            triggerCashOutMessage();
        }

        function triggerCashOutMessage() {
            //------ Cash Out Message
            const selectedPrograms = allPrograms.filter(p => progamCodesSelected.includes(p.LoanProgramCode));
            const mortgageTypes = selectedPrograms.map(p => p.MortgageType.toString());
            const hasNonQM = mortgageTypes.includes("99");

            CustomInput_ci_NewPricing_CashOutAmount.RemoveMessage();
            if (hasNonQM && CustomInput_ci_NewPricing_CashOutAmount.Get().parentNode.style.display == ""
                && Number(CustomInput_ci_NewPricing_LTV.Value()) > Number(65)
                && CustomInput_ci_NewPricing_CashOutAmount.Value() > Number(500000)
            ) {
                CustomInput_ci_NewPricing_CashOutAmount.Message("error", "Amount cannot be over $500k for LTV > 65%");
            }
        }

        //------- OnChanges
        onChangeLoanType = (values) => {
            if (marketPlace !== "PRIVATELENDING") {
                loadCompensationInfo(compensation);
            }

            if (["99", "98", "6"].some(v => values.includes(v))) { // IF 99=Non-QM, 98= Closed End Second, 6 = HELOC
                document.getElementById("chbRuralProperty").parentNode.parentNode.style.display = "";
                document.getElementById("chbDecliningMarket").parentNode.parentNode.style.display = "";

                const isDecliningMarket = document.getElementById("chbDecliningMarket").checked
                document.getElementById("chbDecliningMarket").checked = isDecliningMarket;
            } else {
                document.getElementById("chbRuralProperty").parentNode.parentNode.style.display = "none";
                document.getElementById("chbDecliningMarket").parentNode.parentNode.style.display = "none";
                document.getElementById("chbDecliningMarket").checked = false;
            }

            if (values.includes("98")) { // 98= Closed End Second
                CustomInput_ci_NewPricing_FirstLienAmount.Get().parentNode.style.display = "";

                CustomInput_ci_NewPricing_SubordinateLienAmount.Value("");
                CustomInput_ci_NewPricing_SubordinateLienAmount.Get().parentNode.style.display = "none";
            } else {
                CustomInput_ci_NewPricing_FirstLienAmount.Value("");
                CustomInput_ci_NewPricing_FirstLienAmount.Get().parentNode.style.display = "none";

                CustomInput_ci_NewPricing_SubordinateLienAmount.Get().parentNode.style.display = "";
                CustomInput_ci_NewPricing_SubordinateLienAmount.Value("");
                triggerChangesForLTVsInputs();
            }

            checkMortgageInsurance();
        }

        onChangeAmWestDocumentationType = (values) => {
            if (values.includes("12")) {
                CustomInput_ci_DebtCoverageRatio.Get().parentNode.style.display = "";
            } else {
                CustomInput_ci_DebtCoverageRatio.Get().parentNode.style.display = "none";
            }
        }


        function loanCompensationInfo(data) {
            if (data.EnabledCompPlanList) {
                //Show message indicating there is no compensation plan in the system yet
                document.getElementById("CompensationPlan").value = "";
                document.getElementById("CompensationAmount").value = "";
                document.getElementById("CompensationMax").value = "";

                if (marketPlace == "WHOLESALE") {
                    document.getElementById("RefiCompensationPlan").value = "";
                    document.getElementById("RefiCompensationAmount").value = "";
                    document.getElementById("RefiCompensationMax").value = "";

                    document.getElementById("JuniorCompensationPlan").value = "";
                    document.getElementById("JuniorCompensationAmount").value = "";
                }
            } else {
                let loanAmount = CustomInput_ci_NewPricing_BaseLoanAmount.Value();
                if (isNaN(loanAmount)) loanAmount = 0;

                if (marKetPlace == "WHOLESALE") {
                    // Regular Comp
                    let compensationAmount = loanAmount * data.CompPlan.replace(/^0-9\./g, "") / 100;
                    document.getElementById("CompensationText").textContent = `${data.Complan !== "" ? data.Complan : "---"} | ${compensationAmount > 0 ? formatCurrency(compensationAmount) : "---"} | Max: ${data.CompensationMax !== "" ? data.CompensationMax : "---"}`;
                    document.getElementById("CompensationPlan").value = data.Complan.replace(/^0-9\./g, "");
                    document.getElementById("CompensationAmount").value = compensationAmount;
                    document.getElementById("CompensationMax").value = data.CompensationMax.replace(/[^0-9\.]/g, "");

                    // Refi Comp
                    let refiCompensationAmount = loanAmount * data.RefiCompPerc / 100;
                    document.getElementById("RefiCompensationText").textContent = `${data.RefiCompPerc > 0 ? data.RefiCompPerc.toFixed(3) : "---"} | ${refiCompensationAmount > 0 ? formatCurrency(refiCompensationAmount) : "---"} | Max: ${data.RefiCompMaxAmount > 0 ? formatCurrency(data.RefiCompMaxAmount) : "---"}`;
                    document.getElementById("RefiCompensationPlan").value = data.RefiCompPerc;
                    document.getElementById("RefiCompensationAmount").value = loanAmount * data.RefiCompPerc / 100;
                    document.getElementById("RefiCompensationMax").value = data.RefiCompMaxAmount;

                    //Junior Comp
                    let juniorCompensationAmount = loanAmount * data.JuniorLPCPerc / 100;
                    document.getElementById("JuniorCompensationText").textContent = `${data.JuniorLPCPerc > 0 ? data.JuniorLPCPerc.toFixed(3) + "%" : "---"} | ${juniorCompensationAmount > 0 ? formatCurrency(juniorCompensationAmount) : "---"} | Max: ---`;
                    document.getElementById("JuniorCompensationPlan").value = data.JuniorLPCPerc;
                    document.getElementById("JuniorCompensationAmount").value = juniorCompensationAmount;
                } else {
                    let compensationAmount = loanAmount * data.CompPlan.replace(/[^0-9\.]/g, "") / 100;
                    document.getElementById("CompensationText").textContent = `${data.CompPlan !== "" ? data.CompPlan : "---"} | ${compensationAmount > 0 ? formatCurrency(compensationAmount) : "---"}`;
                    document.getElementById("MaxCompensationText").textContent = `${data.CompensationMax !== "" ? data.CompensationMax : "---"}`;
                    document.getElementById("CompensationPlan").value = data.CompPlan.replace(/[^0-9\.]/g, "");
                    document.getElementById("CompensationAmount").value = compensationAmount;
                    document.getElementById("CompensationMax").value = data.CompensationMax.replace(/[^0-9\.]/g, "");
                }

                //custom warning message
                let showWarning = false;
                let warningText = "";
                let count = 0;
                const warningCompensation = document.getElementById("warning-compensation");
                warningCompensation.style.display = "none";

                if (data.CompPlan === "") {
                    warningText += "Compensation";
                    showWarning = true;
                    count++;
                }

                if (marketPlace == "WHOLESALE") {
                    if (data.RefiCompPerc == 0) {
                        warningText += (warningText !== "" ? " and " : "");
                        warningText += "Refi Compensation";
                        showWarning = true;
                        count++;
                    }

                    if (data.JuniorLPCPerc == 0) {
                        warningText += (warningText !== "" ? " and " : "");
                        warningText += "Jr Compensation";
                        showWarning = true;
                        count++;
                    }
                }

                if (showWarning) {
                    warningCompensation.style.display = "";
                    warningCompensation.querySelector("p > strong").textContent = warningText;
                    warningCompensation.querySelector("p > span").textContent = count < 2 ? "is" : "are";
                }
            }
        }

        function checkMortgageInsurance() {
            let loanTypes = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode))?.map(p => p.MortgageType.toString()) ?? [];

            //show
            document.getElementById("MortgageInsuranceSection").style.display = "";

            // Non QM | Closed End Second (CES) | HELOC
            if (loanTypes.some(lt => ["99", "98", "6"].includes(lt))) {
                CustomDropDown_cdd_NewPricing_MortgageInsurance.Value(3);
            }

            let loanAmount = CustomInput_ci_NewPricing_BaseLoanAmount.Value();

            //if Loan type is Closed End Second (CES) or NON QM and Loan Amount is empty then the process is finished
            if (loanTypes.some(lt => ["99", "98"].includes(lt)) && !loanAmount)
                return;

            let ltv = CustomInput_ci_NewPricing_LTV.Value();
            let cltv = CustomInput_ci_NewPricing_CLTV.Value();

            if (ltv != "" || cltv != "") {
                if (parseFloat(ltv) <= 80 || parseFloat(cltv) <= 80) {
                    CustomDropDown_cdd_NewPricing_MortgageInsurance.Value(3);
                    //hide
                    document.getElementById("MortgageInsuranceSection").style.display = "none";
                    document.getElementById("MortgageInsuranceRemainder").style.display = "none";
                } else if (loanTypes.includes("3")) {//Conventional
                    document.getElementById("MortgageInsuranceRemainder").style.display = "";
                }
            }
        }

        onChangePropertyType = (value) => {
            const element_cddNumberOfUnits = CustomDropDown_cdd_NumberUnits.Get();
            const element_chbNonWarrantableCondo = document.getElementById("chbNonWarrantableCondo");
            if (["1", "2", "6"].includes(value)) { //If 1=Detached, 2=Attached, 6=PUD
                element_cddNumberOfUnits.parentNode.style.display = "";
                element_chbNonWarrantableCondo.parentNode.parentNode.style.display = "none";
                element_chbNonWarrantableCondo.checked = false;

            } else if (["3", "4", "5"].includes(value)) { // 3=condominium, 4=HighRiseCondo, 5=DetachedCondo
                element_cddNumberOfUnits.parentNode.style.display = "none";
                element_chbNonWarrantableCondo.parentNode.parentNode.style.display = "";
                CustomDropDown_cdd_NumberUnits.Value("");
            }
        }

        onChangeResidencyType = (value) => {
            const element_ci_NewPricing_FICO = CustomInput_ci_NewPricing_FICO.Get();
            if (value == "31") {
                CustomInput_ci_NewPricing_FICO.Value("");
                element_ci_NewPricing_FICO.parentNode.style.display = "none";
            }
            else {
                element_ci_NewPricing_FICO.parentNode.style.display = "";
            }
        }

        triggerChangesForLTVsInputs = () => {
            const appraisalValue = CustomInput_ci_NewPricing_AppraisalValue.Value();
            var purchasePrice = CustomInput_ci_NewPricing_PurchasePrice.Value();
            const baseLoanAmount = CustomInput_ci_NewPricing_BaseLoanAmount.Value();
            const firstLienAmount = CustomInput_ci_NewPricing_FirstLienAmount.Value();
            const subordinateLienAmount = CustomInput_ci_NewPricing_SubordinateLienAmount.Value();

            if (CustomInput_ci_NewPricing_PurchasePrice.Get().parentNode.style.display == "none") {
                purchasePrice = undefined;
            }

            const { ltv, cltv, hcltv } = pricerUtils.calculate_LTV_CLTV_HCLTV(
                appraisalValue, purchasePrice, baseLoanAmount, firstLienAmount, subordinateLienAmount);

            if (!isNaN(ltv))
                CustomInput_ci_NewPricing_LTV.Value(ltv);
            if (!isNaN(cltv))
                CustomInput_ci_NewPricing_CLTV.Value(cltv);
            if (!isNaN(hcltv))
                CustomInput_ci_NewPricing_HCLTV.Value(hcltv);

            return { ltv, cltv, hcltv };
        }

        setDropDownsToDefalut = () => {
            // Create Loan Types (Mortgage Types) Checkbox
            const loanTypeControls = document.getElementById("loanTypeControls");
            loanTypeControls.innerHTML = "";
            dropDropOptions.mortgageTypeCodeNames.forEach(c => {
                const label = pricerUIUtils.createLabelWithCheckBoxControl(c.Name, "chbLoanType", `chbLoanType${c.code}`, c.code, () => {
                    const mortgageTypes = []
                    document.querySelectorAll(`input[name="chbLoanType"]:checked`).forEach(el => mortgageTypes.push(el.value));

                    if (["98", "6"].some(v => mortgageTypes.includes(v))) {
                        document.getElementById("rdbLoanPurpose2").click();
                    }

                    if (mortgageTypes.includes("98")) {
                        document.getElementById("rdbRefinancePurposeCashOut").click();
                        document.getElementById("rdbRefinancePurposeNoCashOut").setAttribute("disabled", "disabled");
                    } else {
                        document.getElementById("rdbRefinancePurposeNoCashOut").removeAttribute("disabled");
                    }

                    filterPrograms();
                });
                loanTypeControls.append(label);
            });

            // Create Amortization Checkbox
            const amortizationControls = document.getElementById("amortizationControls");
            amortizationControls.innerHTML = "";
            dropDownOptions.amortizationCodeNames.forEach(c => {
                const label = pricerUIUtils.createLabelWithCheckBoxControl(c.Name, "chbAmortization", `chbAmortization${c.code}`, c.code, filterPrograms);
                amortizationControls.append(label);
            });

            // Create Interest Only Checkbox and append it to Amorization Controls
            {
                const label = pricerUIUtils.createLabelWithCheckBoxControl();
                amortizationControls.append(label);
            }

            const amWestDocumentationTypeControls = document.getElementById("amWestDocumentationTypeControls");
            amWestDocumentationTypeControls.innerHTML = "";
            dropdownOptions.amWestDocumentationCodeNames.forEach(c => {
                if (c.code != 10) { // If not Refi-second
                    const label = pricerUIUtils.createLabelWithCheckBoxControl(c.Name, "chbDocType", `chbAmWestDocType${c.code}`, c.code, filterPrograms);
                    amWestDocumentationTypeControls.append(label);
                }
            });

            // Create Additional Checkboxes and append them to Doc. Type Controls
            {
                const labelITIN = pricerUIUtils.createLabelWithCheckBoxControl("ITIN", `chITIN`, `chbITIN`, 'ITIN', filterPrograms);
                amWestDocumentationTypeControls.append(labelITIN);
            }

            const otherTypeControls = document.getElementById("otherTypeControls");
            otherTypeControls.innerHTML = "";
            // Create Additional checkboxes and append them to the Other type controls
            {
                const labelBuydown = pricerUIUtils.createLabelWithCheckBoxControl('Buydown', `chbBuydown`, `chbBuydown`, 'Buydown', filterPrograms);
                otherTypeControls.append(labelBuydown);

                const labelShortTermRental = pricerUIUtils.createLabelWithCheckBoxControl('Short Term Rental', `chbShortTermRental`, `chbShortTermRental`, 'shortTermRental', filterPrograms);
                labelShortTermRental.append(labelShortTermRental);
            }

            // Create Loan Purpose Checkbox
            const loanPurposeControls = document.getElementById("loanPurposeControls");
            loanPurposeControls.innerHTML = "";
            dropDownOptions.loanPurposeCodenames.forEach(c => {
                if (c.code != 10) { // If not Refi-second
                    const label = pricerUIUtils.createLabelWithCheckBoxControl(c.Name, `rdbLoanPurposes`, `rdbLoanPurpose${c.code}`, c.code, (el) => {
                        const mortgageTypes = [];
                        document.querySelectorAll(`input[name="chbLoanType"]:checked`).forEach(el => mortgageTypes.push(el.value));

                        if (el.target.value == "1" && el.target.checked) {
                            if (["98", "6"].some(v => mortgageTypes.includes(v))) {
                                document.getElementById("rdbLoanPurpose2").checked = true;
                                return;
                            }
                            CustomInput_ci_NewPricing_PurchasePrice.Value("");
                            CustomInput_ci_NewPricing_PurchasePrice.Get().parentNode.style.display = "";
                            document.getElementById("refinancePurposeControls").parentNode.style.display = "none";
                            document.querySelectorAll("div#refinancePurposeControls input:checked").forEach(el => el.checked = false);
                            document.querySelectorAll("div#refinancePurposeControls input").forEach(el => el.setAttribute("disabled", "disabled"));
                        } else if (el.target.value == "2" && el.target.checked) {
                            CustomInput_ci_NewPricing_PurchasePrice.Value("");
                            document.getElementById("refinancePurposeControls").parentNode.style.display = "";
                            CustomInput_ci_NewPricing_PurchasePrice.Get().parentNode.style.display = "none";
                            document.querySelectorAll("div#refinancePurposeControls input").forEach(el => el.removeAttribute("disabled"));
                        }

                        triggerChangesForLTVsInputs();
                        filterPrograms();
                    });
                    loanPurposeControls.append(label);
                }
            });

            DropDownCascading_ddc_Product.SetDataFilter(dropDownOptions.mortgageTypeCodeName); //load filter list (mortgage types)

            const refinancePurposeControls = document.getElementById("refinancePurposeControls");
            refinancePurposeControls.innerHTML = "";
            const refinancePurpose = [];
            refinancePurpose.push(new CodeName({ Code: "CashOut", Name: "Cash Out" }));
            refinancePurpose.push(new CodeName({ Code: "NoCashOut", Name: "No Cash Out/Rate & Term" }));
            refinancePurpose.forEach(c => {
                const label = pricerUIUtils.createLabelWithRadioControl(c.Name, `rdbRefinancePurposes`, `rdbRefinancePurpose${c.code}`, c.code, filterPrograms);
                refinancePurposeControls.append(label);
            });

            const occupancyControls = document.getElementById("occupancyControls");
            occupancyControls.innerHTML = "";
            dropdownOptions.occupancyCodeName.forEach(c => {
                const label = pricerUIUtils.createLabelWithRadioControl(c.Name, `rdbOccupancy`, `rdbOccupancy${c.code}`, c.code, filterPrograms);
                occupancyControls.append(label);
            });

            CustomDropDown_cdd_PropertyType.Data(dropDownOptions.propertyTypeCodeNames);
            CustomDropDown_cdd_PropertyType.RemoveMessage();
            CustomDropDown_cdd_NumberUnits.Get().parentNode.style.display = "none";
            CustomDropDown_cdd_NumberUnits.Data(dropDownOptions.unitCodeNames);
            CustomDropDown_cdd_NumberUnits.RemoveMessage();
            CustomDropDown_cdd_State.Value("");
            CustomDropDown_cdd_State.RemoveMessage();
            CustomDropDown_cdd_County.Data([]);
            CustomDropDown_cdd_County.RemoveMessage();
            CustomDropDown_cdd_ResidenceType.Data(dropDownOptions.residencyCodeNames);
            CustomDropDown_cdd_ResidenceType.RemoveMessage();
        }

        filterDropDowns = (codeNames) => {
            const residencyCodeNames = dropDownOptions.residencyCodeNames.filter(c => Array.from(codeNames.residencyCodeNames).includes(c.code));
            const propertyTypeCodeNames = dropdownOptions.propertyTypeCodeNames.filter(c => Array.from(codeNames.propertyTypeCode)).includes(c.code);
            const unitCodeNames = dropdownOptions.unitCodeNames.filter(c => Array.from(codeNames.unitCodeNames).includes(c.code));

            let value = undefined;
            value = CustomDropDown_cdd_ResidenceType.Value();
            CustomDropDown_cdd_ResidenceType.Data(residencyCodeNames);
            CustomDropDown_cdd_ResidenceType.Value(value);

            if (residencyCodeNames.length == 1) {
                value = residencyCodeNames[0].Code;
                CustomDropDown_cdd_ResidenceType.Value(value);
                onChangeResidencyType(value.toString());
            }

            if (!residencyCodeNames.some(c => c.code == 31)) {
                CustomDropDown_cdd_ResidenceType.Message("info", "Foreign National if not allowed");
            } else {
                CustomDropDown_cdd_ResidenceType.RemoveMessage();
            }
        }

        onClickCheckBox = async (el) => {

            const code = el.dataset.id;
            if (el.checked) {
                if (programCodesSelected.length < 3) {
                    programCodesSelected.push(code);

                    const ul = document.querySelector("#programCodesSelectedContainer > ul");
                    ul.innerHTML = "";
                    programCodesSelected.forEach((pc, index) => {
                        const li = document.createElement("li");
                        const span = document.createElement("span");
                        span.innerHTML = "&#10006;";
                        li.textContent = pc;
                        li.appendChild(span);
                        li.id = `selectedCode_${pc}`;
                        li.dataset.id = pc;
                        li.addEventListener("click", () => {
                            progamCodesSelected = programCodesSelected.filter(c => c != pc);
                            const el = document.getElementById(li.id);
                            ur.removeChild(el);
                            setTableProductsThatMatch(programs);

                            if (programCodesSelected.length > 0)
                                document.getElementById("programCodesSelectedContainer").style.display = "";
                            else
                                document.getElementById("programCodesSelectedContainer").style.display = "none";

                            const programsFiltered = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode));
                            const mortgageTypes = programsFiltered.map(p => p.MortgageType.toString());
                            if (!mortgageTypes.includes("6")) {
                                document.getElementById("helocPositioDiv").style.display = "none";
                            }

                            const amWestDocumentations = programsFiltered.map(p => p.AmWestDocumentation.toString()).flat();
                            onChangeAmWestDocumentationType(amWestDocumentations);

                            additionalOptionFields = additionalOptionFields.filter(f => f.LoanProgramCode != pc);
                            updateAdditionalOptionFields();

                            if (marketPlace !== "PRIVATELENDING") {
                                loadCompensationInfo(compensation);
                            }

                            showOrHideCashOutField(mortgageTypes)
                        });

                        ul.appendChild(li);
                    });

                    const program = allPrograms.find(p => p.LoanProgramCode == code);
                    document.getElementById("rdbHELOCPositionFirst").checked = false;
                    document.getElementById("rdbHELOCPositionSecond").checked = false;

                    if (program && program.MortgageType == 6) {
                        document.getElementById("helocPositionDiv").style.display = "";
                    }

                    const additionalFields = await pricerUtils.getAdditionalOptionFields(code);
                    Array.from(additionalFields).forEach(a => additionalOptionFields.push(a));
                } else {
                    el.checked = false;
                }
            } else {
                programCodesSelected = programCodesSelected.filter(c => c != code);
                additionalOptionFields = additionalOptionFields.filter(f => f.LoanProgramCode != code);

                const ul = document.querySelector("#programCodesSelectedContainer > ul");
                const el = document.getElementById(`selectedCode_${code}`);
                if (el)
                    ul.removeChild(el);

                if (isProductSelection) {
                    isProductSelection = false;
                    DropDownCascading_ddc_Product.Reset();
                    selectProgramSettings();
                    filterPrograms();
                }
            }

            const programsFiltered = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode));
            const amWestDocumentations = programsFiltered.map(p => p.AmWestDocumentation.toString()).flat();
            const mortgageTypes = programsFiltered.map(p => p.MortgageType.toString());

            onChangeAmWestDocumentationType(amWestDocumentations);
            updateAdditionalOptionFields();

            if (!mortgageTypes.includes("6")) {
                document.getElementById("helocPositionDiv").style.display = "none";
            }

            onChangeLoanType(mortgageTypes);

            if (programCodesSelected.length > 0)
                document.getElementById("programCodesSelectedContainer").style.display = "";
            else
                document.getElementById("programCodesSelectedContainer").style.display = "none";

            if (marketPlace != "PRIVATELENDING") {
                loadCompensationInfo(compensation);
            }

            showOrHideCashOutField(mortgageTypes);
        }

        updateAdditionalOptionFields = () => {
            const divInputs = getDivAdditionalOptionFields();
            const filteredFields = [];
            additionalOptionFields.filter(predicateAdditionalOptionFields)
                .forEach(f => {
                    if (!filteredFields.some(of => of.PricerFieldName == f.PricerFieldName))
                        filteredFields.push(f);
                });

            divInputs.innerHTML = filteredFields.map(f => {
                var field = new AdditionalOptionField(f);
                if (field.InputType == "Checkbox") {
                    return templateYandN_asCheckbox.replace("{LabelControl}", field.CodeName)
                        .replaceAll("{name}", field.PricerFieldName)
                        .replace("{value}", field.PricerFieldName)
                } else if (field.InputType == "Select") {
                    return `<div style="width: 250px; margin-bottom: 5px;">
                                <label style="user-select: none">
                                    ${field.CodeName}
                                </label>
                                <select id=${field.PricerFieldName} name="${field.PricerFieldName}" data-additional="true">
                                    ${field.Options.map(c => `<option value="${c.CodeValue}">${c.CodeName}</option>`).join("")}
                                </select>
                            </div>`
                } else {
                    return pricerUtils.createAdditionalFieldControl(field.InputType, field.CodeName, field.PricerFieldName, "", field.IsRequired).outerHTML;
                }
            }).join("");

            divInputs.innerHTML += getHardcodedAdditionalOptionFields();

            if (filteredFields.length > 0) {
                document.getElementById("additionalOptionFieldsMainContainer").style.display = "";
            } else {
                document.getElementById("additionalOptionFieldsMainContainer").style.display = "none";
            }
        }


    </script>
}