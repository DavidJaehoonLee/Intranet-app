@{
    ViewData["Title"] = "Privacy Policy";
    string marketPlace = "marketPlace";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>


@section scripts {
    @Html.Partial("_APE_FunctionsPartialScript")

    <script type="text/javascript">
        var dropDrownOptions = {
            amWestDocumentationCodeNames: [],
            armotizationCodeNames: [],
            lienPositionCodeNames: [],
            loanTermCodeNames: [],
            mortgageTypeCodeNames: [],
            occupancyCodeNames: [],
            propertyTypeCodeNames: [],
            refinancePurposeCodeNames: [],
            unitCodeNames: [],
            residencyCodeNames: []
        };

        var isFirstLoad = true;
        const allPrograms = Array.of();
        var programs = Array.of();
        var paginator;
        var compensation;
        const initialBrokerOrgId = "@Model.BrokerOrgID";
        const marketPlace = "@marketPlace";

        var scenariosHistory = [];
        var progamCodesSelected = [];
        var additionalOptionFields = [];

        function closeFilters() {
            document.getElementById("filters").parentElement.style.display = "none";
        }

        function openFilter() {
            document.getElementById("filters").parentElement.style.display = "";
            // Scroll up
            setTimeout(() => {
                $(".filters-container").animate({
                        scrollTop: 0
                }, 300);
            }, 100);
        }

        function openSaveDialog() {
            $('#textScenarioName').val('');
            $('#saveErrors').text('');
            $('#modalSave').modal('show');
        }

        const getAllSavedScenarios = () => {
            $.ajax({
                url: "@Url.Action("GetAllSavedScenariosByUser")",
                method: "GET",
                success: function (result) {
                    scenariosHistory = result.map(item => {
                        return {
                            id: item.Id,
                            description: item.Description,
                            jsonData: JSON.parse(item.JsonData),
                            date: item.CreatedAt
                        }
                    });
                },
                complete: function () {
                    fillHistoryTable();
                }
            });
        }

        const fillHistoryTable = () => {
            table = document.querySelector('#HistoryTable > tbody');
            table.innerHTML = "";
            let rows = "";
            for (const item of scenariosHistory) {
                rows += `<tr data-id="${item.id}" @(!true ? "ondblclick" : "onclick")="getData(${item.id})><td>${item.description}</td><td><i class="fa fa-trash fa-lg" aria-hidden="true" onclick="removeScenario(event)"></i></td></tr>`;
            }
            table.innerHTML = rows;
        }

        const getData = id => {
            const data = scenariosHistory.find(x => x.id === id);
            if (data) {
                $("#modalHistory").modal("hide");
                setScenario(data.jsonData);
            }
        }

        function ConfirmDialog(msg, callback) {
            var $confirm = $("#ModalConfirm");
            $confirm.modal('show');
            $("#ModalConfirmText").html(msg);
            $("#ModalConfirmYes").off('click').click(function () {
                $confirm.modal("hide");
                callback();
            });
        }

        function removeScenario(event) {
            event.stopPropagation();
            const id = event.target.parentNode.parentNode.dataset.id;
            const data = {
                id,
            };
            addAtiForgeryToken(data, "#newPricerContainer");

            ConfirmDialog("Are you sure to delete?", () => {
                $.ajax({
                    url: "@Url.Action("DeleteSavedScenarioById")",
                    method: "POST",
                    data: data,
                    success: function (result) {
                        if (result.success) {
                            document.querySelector(`#HistoryTable > tbody > tr[data-id="${id}"]`).remove();
                            //Remove the item from the array
                            scenariosHistory = scenariosHistory.filter(item => item.id != id);
                        }
                    },
                    error: function () {
                        showToastMessage("An unexpected error has occured. Please try again", "error", 5000);
                    }
                });
            });
        }

        function existsName(name) {
            const index = scenariosHistory.findIndex(item => item.description === name);
            return index > -1;
        }

        var isProductSelection = false;

        document.addEventListener('DOMContentLoaded', function () {

            getAllSavedScenarios();

            //---------------- Init DOMContentLoaded-------------------------
            initialize();
            //------------- Starts Controls events---------------

            DropDownCascading_ddc_Product.OnChange(async () => {
                isProductSelection = true;
                selectProgramSettings();
                resetProgramsSelected();
                resetAdditionalOptionFields();
                const values = DropDownCascading_ddc_Product.GetValue();
                const value = Array.from(values).find(v => v && v.length > 0);
                if (value && programCodesSelected.length == 0) {
                    programCodesSelected.push(value);
                    const additionalFields = await pricerUtils.getAdditionalOptionFields(value);
                    Array.from(additionalFields).forEach(a => additionalOptionFields.push(a));
                    filterPrograms();
                    selectProgramSettings(value);

                    const mortgageTypes = allPrograms.filter(p => p.LoanProgramCode == value).map(p => p.MortgageType.toString());

                    document.getElementById("rdbHELOCPositionFirst").checked = false;
                    document.getElementById("rdbHELOCPositionSecond").checked = false;

                    if (mortgageTypes.includes("6")) {
                        document.getElementById("helocPositionDiv").style.display = "";
                        document.getElementById("");
                    } else {
                        document.getElementById("helocPositionDiv").style.display = "none";
                    }

                    @if(true)
                    {
                        <text>
                    openFilter();
                        </text>
                    }
                } else {
                    isProductSelection = false;
                    selectProgramSettings();
                    filterPrograms();
                }

                const amWestDocumentations = allPrograms.filter(p => programCodesSelected.includes(p.LoanProgramCode)).map(p => p.AmWestDocumentation.toString()).flat();
                onChangeAmWestDocumentationType(amWestDocumentations);



            });
        }, false);

        // Loan program setting
        selectProgramSettings = async (loanProgramCode = undefined) => {
            var programSettings = {};
            if (loanProgramCode) {
                programSettings = await pricerUtils.getProgramSettings(loanProgramCode);
            }
            else {
                const loanPurposeControls = document.querySelectorAll("div#loanPurposeControls input[type='radio']");
                const refinancePurposeControls = document.querySelectorAll("div#refinancePurposeControls input[type='radio']");
                const occupancyControls = document.querySelectorAll("div#occupancyControls input[type='radio']");

                loanPurposeControls.forEach(c => {
                    c.checked = false;
                    c.removeAttribute("disabled");
                });

                refinancePurposeControls.forEach(c => {
                    c.checked = false;
                    c.removeAttribute("disabled");
                });

                occupancyControls.forEach(c => c.checked = false);
            }

            const loanTypesControls = document.querySelectorAll(`div#loanTypeControls input[type="checkbox]`);
            if (loanTypesControls.length > 0) {
                loanTypesControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.MortgageType.toString()) {
                        control.checked = true;
                        if (control.value == "6") {
                            document.getElementById("rdbLoanPurpose2").checked = true;
                            document.getElementById("rdbRefinancePurposeCashOut").checked = true;

                            document.getElementById("rdbLoanPurpose1").setAttribute("disabled", true);
                            document.getElementById("rdbRefinancePurposeNoCashOut").setAttribute("disabled", true);
                        }
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const amortizationControls = document.querySelectorAll(`div#amortizationControls input[type="checkbox"]`);
            if (amortizationControls.length > 0) {
                amortizationControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.Amortization.toString()) {
                        control.checked = true;
                        if (control.value == "6") {//6 = HELOC
                            document.getElementById("rdbLoanPurpose2").checked = true;
                            document.getElementById("rdbRefinancePurposeCashOut").checked = true;

                            document.getElementById("rdbLoanPurpose1").setAttribute("disabled", true);
                            document.getElementById("rdbRefinancePurposeNoCashOut").setAttribute("disabled", true);
                        }
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const loanTermControls = document.querySelectorAll(`div#loanTermControls input[type="checkbox"]`);
            if (loanTermControls.length > 0) {
                loanTermControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.Term.toString()) {
                        control.checked = true;
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }

            const amwesDocumentationTypeControls = document.querySelectorAll(`div#amWestDocumentationTypeControls input[type="checkbox"]`);
            if (amwesDocumentationTypeControls.length > 0) {
                amwesDocumentationTypeControls.forEach(control => {
                    if (loanProgramCode == undefined) {
                        control.checked = false;
                        control.removeAttribute("disabled");
                    } else if (control.value == programSettings.AmWestDocumentation.toString()) {
                        control.checked = true;
                    } else {
                        control.setAttribute("disabled", true);
                    }
                });
            }
        }

        resetProgramsSelected = () => {
            programCodesSelected = [];
            document.querySelector("#programCodesSelectedContainer > ul").innerHTML = "";
            document.getElementById("programCodesSelectedContainer").style.display = "none";
        }

        resetAdditionalOptionFields = () => {
            additionalOptionFields = [];
        }

        filterPrograms = async () => {
            const loanProgramCode = programCodesSelected[0];
            var mortgageTypeCodes = Array.from(document.querySelectorAll("div#loanTypeControls input:checked")).map(el => el.value);
            const amortizationCodes = Array.from(document.querySelectorAll("div#amortizationControls input:checked")).map(el => el.value);
            const loanTerms = Array.from(document.querySelectorAll("div#loanTermControls input:checked")).map(el => el.value);
            const amWestDocumentation = Array.from(document.querySelectorAll("div#amWestDocumentationTypeControls input:checked")).map(el => el.value);
            const loanPurposeCodes = Array.from(document.querySelectorAll("div#loanPurposeControls input:checked")).map(el => el.value);

            if (loanPurposeCodes.includes("2")) {
                loanPurposeCodes.push("10");
            }

            const refinancePurposes = document.querySelector("div#refinancePurposeControls input:checked")?.value ?? "";
            const occupancyCode = document.querySelector("div#occupanctyControls input:check")?.value;


        }

    </script>
}